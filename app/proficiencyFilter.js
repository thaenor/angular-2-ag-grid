System.register([], function(exports_1) {
    var FILTER_TITLE, PROFICIENCY_TEMPLATE, PROFICIENCY_NONE, PROFICIENCY_ABOVE40, PROFICIENCY_ABOVE60, PROFICIENCY_ABOVE80, PROFICIENCY_NAMES, PROFICIENCY_VALUES, ProficiencyFilter;
    return {
        setters:[],
        execute: function() {
            FILTER_TITLE = '<div style="text-align: center; background: lightgray; width: 100%; display: block; border-bottom: 1px solid grey;">' +
                '<b>TITLE_NAME</b>' +
                '</div>';
            PROFICIENCY_TEMPLATE = '<label style="padding-left: 4px;">' +
                '<input type="radio" name="RANDOM"/>' +
                'PROFICIENCY_NAME' +
                '</label>';
            PROFICIENCY_NONE = 'none';
            PROFICIENCY_ABOVE40 = 'above40';
            PROFICIENCY_ABOVE60 = 'above60';
            PROFICIENCY_ABOVE80 = 'above80';
            PROFICIENCY_NAMES = ['No Filter', 'Above 40%', 'Above 60%', 'Above 80%'];
            PROFICIENCY_VALUES = [PROFICIENCY_NONE, PROFICIENCY_ABOVE40, PROFICIENCY_ABOVE60, PROFICIENCY_ABOVE80];
            ProficiencyFilter = (function () {
                function ProficiencyFilter() {
                }
                ProficiencyFilter.prototype.init = function (params) {
                    this.filterChangedCallback = params.filterChangedCallback;
                    this.selected = PROFICIENCY_NONE;
                    this.valueGetter = params.valueGetter;
                };
                ProficiencyFilter.prototype.getGui = function () {
                    var eGui = document.createElement('div');
                    var eInstructions = document.createElement('div');
                    eInstructions.innerHTML = FILTER_TITLE.replace('TITLE_NAME', 'Custom Proficiency Filter');
                    eGui.appendChild(eInstructions);
                    var random = '' + Math.random();
                    var that = this;
                    PROFICIENCY_NAMES.forEach(function (name, index) {
                        var eFilter = document.createElement('div');
                        var html = PROFICIENCY_TEMPLATE.replace('PROFICIENCY_NAME', name).replace('RANDOM', random);
                        eFilter.innerHTML = html;
                        var eRadio = eFilter.querySelector('input');
                        if (index === 0) {
                            eRadio.checked = true;
                        }
                        eGui.appendChild(eFilter);
                        eRadio.addEventListener('click', function () {
                            that.selected = PROFICIENCY_VALUES[index];
                            that.filterChangedCallback();
                        });
                    });
                    return eGui;
                };
                ProficiencyFilter.prototype.doesFilterPass = function (params) {
                    var value = this.valueGetter(params);
                    var valueAsNumber = parseFloat(value);
                    switch (this.selected) {
                        case PROFICIENCY_ABOVE40: return valueAsNumber >= 40;
                        case PROFICIENCY_ABOVE60: return valueAsNumber >= 60;
                        case PROFICIENCY_ABOVE80: return valueAsNumber >= 80;
                        default: return true;
                    }
                };
                ProficiencyFilter.prototype.isFilterActive = function () {
                    return this.selected !== PROFICIENCY_NONE;
                };
                return ProficiencyFilter;
            })();
            exports_1("default", ProficiencyFilter);
        }
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2ZpY2llbmN5RmlsdGVyLnRzIl0sIm5hbWVzIjpbIlByb2ZpY2llbmN5RmlsdGVyIiwiUHJvZmljaWVuY3lGaWx0ZXIuY29uc3RydWN0b3IiLCJQcm9maWNpZW5jeUZpbHRlci5pbml0IiwiUHJvZmljaWVuY3lGaWx0ZXIuZ2V0R3VpIiwiUHJvZmljaWVuY3lGaWx0ZXIuZG9lc0ZpbHRlclBhc3MiLCJQcm9maWNpZW5jeUZpbHRlci5pc0ZpbHRlckFjdGl2ZSJdLCJtYXBwaW5ncyI6IjtRQUNJLFlBQVksRUFLWixvQkFBb0IsRUFNcEIsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBRW5CLGlCQUFpQixFQUNqQixrQkFBa0I7Ozs7WUFqQmxCLFlBQVksR0FDWixzSEFBc0g7Z0JBQ3RILG1CQUFtQjtnQkFDbkIsUUFBUSxDQUFDO1lBRVQsb0JBQW9CLEdBQ3BCLG9DQUFvQztnQkFDcEMscUNBQXFDO2dCQUNyQyxrQkFBa0I7Z0JBQ2xCLFVBQVUsQ0FBQztZQUVYLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztZQUMxQixtQkFBbUIsR0FBRyxTQUFTLENBQUM7WUFDaEMsbUJBQW1CLEdBQUcsU0FBUyxDQUFDO1lBQ2hDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztZQUVoQyxpQkFBaUIsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3pFLGtCQUFrQixHQUFHLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztZQUUzRztnQkFBQUE7Z0JBMERBQyxDQUFDQTtnQkFwRFdELGdDQUFJQSxHQUFaQSxVQUFhQSxNQUFNQTtvQkFDZkUsSUFBSUEsQ0FBQ0EscUJBQXFCQSxHQUFHQSxNQUFNQSxDQUFDQSxxQkFBcUJBLENBQUNBO29CQUMxREEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsZ0JBQWdCQSxDQUFDQTtvQkFDakNB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Q29udGVudCI6WyJcclxudmFyIEZJTFRFUl9USVRMRSA9XHJcbiAgICAnPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlcjsgYmFja2dyb3VuZDogbGlnaHRncmF5OyB3aWR0aDogMTAwJTsgZGlzcGxheTogYmxvY2s7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBncmV5O1wiPicgK1xyXG4gICAgJzxiPlRJVExFX05BTUU8L2I+JyArXHJcbiAgICAnPC9kaXY+JztcclxuXHJcbnZhciBQUk9GSUNJRU5DWV9URU1QTEFURSA9XHJcbiAgICAnPGxhYmVsIHN0eWxlPVwicGFkZGluZy1sZWZ0OiA0cHg7XCI+JyArXHJcbiAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJSQU5ET01cIi8+JyArXHJcbiAgICAnUFJPRklDSUVOQ1lfTkFNRScgK1xyXG4gICAgJzwvbGFiZWw+JztcclxuXHJcbnZhciBQUk9GSUNJRU5DWV9OT05FID0gJ25vbmUnO1xyXG52YXIgUFJPRklDSUVOQ1lfQUJPVkU0MCA9ICdhYm92ZTQwJztcclxudmFyIFBST0ZJQ0lFTkNZX0FCT1ZFNjAgPSAnYWJvdmU2MCc7XHJcbnZhciBQUk9GSUNJRU5DWV9BQk9WRTgwID0gJ2Fib3ZlODAnO1xyXG5cclxudmFyIFBST0ZJQ0lFTkNZX05BTUVTID0gWydObyBGaWx0ZXInLCAnQWJvdmUgNDAlJywgJ0Fib3ZlIDYwJScsICdBYm92ZSA4MCUnXTtcclxudmFyIFBST0ZJQ0lFTkNZX1ZBTFVFUyA9IFtQUk9GSUNJRU5DWV9OT05FLCBQUk9GSUNJRU5DWV9BQk9WRTQwLCBQUk9GSUNJRU5DWV9BQk9WRTYwLCBQUk9GSUNJRU5DWV9BQk9WRTgwXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2ZpY2llbmN5RmlsdGVyIHtcclxuXHJcbiAgICBwcml2YXRlIGZpbHRlckNoYW5nZWRDYWxsYmFjazogRnVuY3Rpb247XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHZhbHVlR2V0dGVyOiBGdW5jdGlvbjtcclxuXHJcbiAgICBwcml2YXRlIGluaXQocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2sgPSBwYXJhbXMuZmlsdGVyQ2hhbmdlZENhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBQUk9GSUNJRU5DWV9OT05FO1xyXG4gICAgICAgIHRoaXMudmFsdWVHZXR0ZXIgPSBwYXJhbXMudmFsdWVHZXR0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRHdWkoKSB7XHJcbiAgICAgICAgdmFyIGVHdWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB2YXIgZUluc3RydWN0aW9ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGVJbnN0cnVjdGlvbnMuaW5uZXJIVE1MID0gRklMVEVSX1RJVExFLnJlcGxhY2UoJ1RJVExFX05BTUUnLCAnQ3VzdG9tIFByb2ZpY2llbmN5IEZpbHRlcicpO1xyXG4gICAgICAgIGVHdWkuYXBwZW5kQ2hpbGQoZUluc3RydWN0aW9ucyk7XHJcblxyXG4gICAgICAgIHZhciByYW5kb20gPSAnJyArIE1hdGgucmFuZG9tKCk7XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICBQUk9GSUNJRU5DWV9OQU1FUy5mb3JFYWNoKCBmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGVGaWx0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdmFyIGh0bWwgPSBQUk9GSUNJRU5DWV9URU1QTEFURS5yZXBsYWNlKCdQUk9GSUNJRU5DWV9OQU1FJywgbmFtZSkucmVwbGFjZSgnUkFORE9NJywgcmFuZG9tKTtcclxuICAgICAgICAgICAgZUZpbHRlci5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICB2YXIgZVJhZGlvID0gPEhUTUxJbnB1dEVsZW1lbnQ+IGVGaWx0ZXIucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBlUmFkaW8uY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZUd1aS5hcHBlbmRDaGlsZChlRmlsdGVyKTtcclxuXHJcbiAgICAgICAgICAgIGVSYWRpby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0ZWQgPSBQUk9GSUNJRU5DWV9WQUxVRVNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBlR3VpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZG9lc0ZpbHRlclBhc3MocGFyYW1zKSB7XHJcblxyXG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWVHZXR0ZXIocGFyYW1zKTtcclxuICAgICAgICB2YXIgdmFsdWVBc051bWJlciA9IHBhcnNlRmxvYXQodmFsdWUpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgY2FzZSBQUk9GSUNJRU5DWV9BQk9WRTQwIDogcmV0dXJuIHZhbHVlQXNOdW1iZXIgPj0gNDA7XHJcbiAgICAgICAgICAgIGNhc2UgUFJPRklDSUVOQ1lfQUJPVkU2MCA6IHJldHVybiB2YWx1ZUFzTnVtYmVyID49IDYwO1xyXG4gICAgICAgICAgICBjYXNlIFBST0ZJQ0lFTkNZX0FCT1ZFODAgOiByZXR1cm4gdmFsdWVBc051bWJlciA+PSA4MDtcclxuICAgICAgICAgICAgZGVmYXVsdCA6IHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0ZpbHRlckFjdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZCAhPT0gUFJPRklDSUVOQ1lfTk9ORTtcclxuICAgIH1cclxuXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
